using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libopk"], :libopk),
    LibraryProduct(prefix, ["libcobyla"], :libcobyla),
    LibraryProduct(prefix, ["libbobyqa"], :libbobyqa),
    LibraryProduct(prefix, ["libnewuoa"], :libnewuoa),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/emmt/OptimPack/releases/download/v3.1.0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc)                  => ("$bin_prefix/OptimPack.v3.1.0.aarch64-linux-gnu.tar.gz",          "9b3d559c9021c58b710ee240ef8f2e6a12b935517c72ac1e9f73cfb924999d10"),
    Linux(:aarch64, libc=:musl)                   => ("$bin_prefix/OptimPack.v3.1.0.aarch64-linux-musl.tar.gz",         "8c427f5574fe62d1c393568b82c75da151058ea82580a77de2fe2f4430943f7d"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/OptimPack.v3.1.0.arm-linux-gnueabihf.tar.gz",        "dbcb477fb7cceeb46c08fb21ac6a0367bdba876b965f72833580e2834a672627"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf)  => ("$bin_prefix/OptimPack.v3.1.0.arm-linux-musleabihf.tar.gz",       "bddb5f9ca1f061f9a8c5202cb9807c028cab59bac61f34f092c626ef0a756041"),
    Linux(:i686, libc=:glibc)                     => ("$bin_prefix/OptimPack.v3.1.0.i686-linux-gnu.tar.gz",             "41c293fe0de49d37306ae6219e1de63a1d633ea451cbe62c0d47142759c7a5d9"),
    Linux(:i686, libc=:musl)                      => ("$bin_prefix/OptimPack.v3.1.0.i686-linux-musl.tar.gz",            "3691a1179ea9cea04eaf1e6afe41c5d6f85d02d75da05adc0d021f500ae28c1d"),
    Windows(:i686)                                => ("$bin_prefix/OptimPack.v3.1.0.i686-w64-mingw32.tar.gz",           "ace0885f9c0c614df861688821ee5fbef3de0a6db9d616a0be59970a44ae4151"),
    Linux(:powerpc64le, libc=:glibc)              => ("$bin_prefix/OptimPack.v3.1.0.powerpc64le-linux-gnu.tar.gz",      "7d7e912fb028e129fdcc2a91768b942e4788239b2bcc9421ed11affd3bd7a918"),
    MacOS(:x86_64)                                => ("$bin_prefix/OptimPack.v3.1.0.x86_64-apple-darwin14.tar.gz",      "91914817902f2ce48ff7ecabbdfc303d51e2a65926fa1dd0823579257bc545fa"),
    Linux(:x86_64, libc=:glibc)                   => ("$bin_prefix/OptimPack.v3.1.0.x86_64-linux-gnu.tar.gz",           "4738864c8166b69f128ea1497a53cdc46098e89472b14715d31b25a5a2a5164b"),
    Linux(:x86_64, libc=:musl)                    => ("$bin_prefix/OptimPack.v3.1.0.x86_64-linux-musl.tar.gz",          "2acbcbda8478a7b63ba96d1d8d29848684555a4de5ed2912240f7c9660039142"),
    FreeBSD(:x86_64)                              => ("$bin_prefix/OptimPack.v3.1.0.x86_64-unknown-freebsd11.1.tar.gz", "268f36dddd8e6e71a4ef6f2badb9329315750e7b26fc5f5f27193ccab0b80015"),
    Windows(:x86_64)                              => ("$bin_prefix/OptimPack.v3.1.0.x86_64-w64-mingw32.tar.gz",         "2a914c7bcc0d05875569878b9d0188012d591026239263d27f6fb46b17484c66"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
